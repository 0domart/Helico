#Animation d'un hélicoptère eteignant le feu d'une foret
#Réalisé par Julien DUPONT, Rémi GUERIN et Julien GODEST
#Date du rendu : XX/XX/2019


#Définition des fonctions utilisé plus tard pour animer les objets
def translation(matrice, x, y): #pour déplacer une matrice passé en paramètre
    return matrix([[1,0,x],[0,1,y],[0,0,1]]) * matrice

def translationSpe(matrice, x, y,j,deb,fin):
    if j > deb :
        if j < fin :
            return matrix([[1,0,x],[0,1,y],[0,0,1]]) * matrice
    return matrice


def sol():
    return line([(0,0),(50,0)], rgbcolor='grey')


def rotation(matrice, angle, x, y, nbrImage): #Utiliser pour tourner la matrice en fonction d'un angle et d'un nbrImage car la roue tourne et se déplace horizontalement en même temps
    x+= nbrImage * KVitesse
    return matrix ([[cos(angle), -sin(angle), x], [sin(angle), cos(angle), y], [0, 0, 1]]) * matrice

def vec(matrice): #Transforme une matrice donnée en paramètre en un vecteur

    return vector (matrice)

def HeliceArriere (vecLigne): #Dessine les hélices à l'arrière de l'hélicoptère en noir

    return line ([(vecLigne[0], vecLigne[2]), (vecLigne[1], vecLigne[3])], color='black')


def Helicoptere(pos, NombreImage):

        x = [vector(pos)[j] for j in [0..27]]
        y = [vector(pos)[j] for j in [28..56]]
        if NombreImage % 2 == 0 : #Une fois sur deux le trait représentant l'hélice rapetissie, l'autre fois il s'agrandit ce qui donne l'illusion que les pales tournent
            x[6] += 1
            x[7] -= 1
        if NombreImage % 2 == 1 :
            x[6] -= 1
            x[7] += 1
        RC = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
        return line((RC[0], RC[1]), rgbcolor='red') + line((RC[1],RC[2]), rgbcolor='red',xmin=0, xmax=40, ymin = 0 , ymax = 30) + line((RC[2],RC[3]), rgbcolor='red') + line((RC[3],RC[4]), rgbcolor='red')  + line((RC[4],RC[8]), rgbcolor='red') + line((RC[4],RC[5]), rgbcolor='black') + line((RC[5],RC[6]), rgbcolor='black') + line((RC[5],RC[7]), rgbcolor='black') + line((RC[8],RC[9]), rgbcolor='red') + line((RC[8],RC[11]), rgbcolor='red')+ line((RC[9],RC[10]), rgbcolor='red') + line((RC[9],RC[11]), rgbcolor='red') + line((RC[10],RC[12]), rgbcolor='red') + line((RC[12],RC[13]), rgbcolor='red') + line((RC[13],RC[17]), rgbcolor='black') + line((RC[13],RC[14]), rgbcolor='red') + line((RC[14],RC[18]), rgbcolor='black') + line((RC[15],RC[16]), rgbcolor='black') + line((RC[16],RC[17]), rgbcolor='black') + line((RC[17],RC[18]), rgbcolor='black') + line((RC[18],RC[19]), rgbcolor='black') + line((RC[14],RC[20]), rgbcolor='red') + line((RC[20],RC[21]), rgbcolor='red') + line((RC[21],RC[22]), rgbcolor='red') + line((RC[22],RC[0]), rgbcolor='red') + circle (RC[23], 0.4, rgbcolor='black', fill = True) + polygon([RC[8],RC[9],RC[11]], rgbcolor='lightcyan') + polygon([RC[0],RC[1],RC[2],RC[3],RC[4],RC[8],RC[11],RC[9],RC[10],RC[12],RC[13],RC[14],RC[20],RC[21],RC[22]], rgbcolor='yellow') + polygon([RC[1],RC[2],RC[10]], rgbcolor='red') # On relie certains points entre eux pour former des lignes, on crée également un cercle, des polygones qu'on remplit d'une couleur


def Sapin(x,y,j) :
        A = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
        return polygon([A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[2]], rgbcolor='green') + polygon([A[0],A[1],A[13],A[14]], rgbcolor='brown')

def Eau(pos,j,Deb,Fin) : #Dessine un trait grace a un vecteur de l'image debut à l'image fin en sachant que l'image actuel est j
    if Deb < j :
        if j < Fin:
            return line([(pos[0], pos[2]), (pos[1], pos[3])], rgbcolor='blue')
    return line ([(0, 0), (0, 0)])

def Feu(pos,j,Deb,Fin, color) :
    if Deb < j:
        if j < Fin:
            if color == 1:
                return line([(pos[0], pos[2]), (pos[1], pos[3])], rgbcolor ='red', thickness = 3) #Dessine un trait d'epaisseur 3 de couleur rouge
            return line([(pos[0], pos[2]), (pos[1], pos[3])], rgbcolor ='orange', thickness = 3)
    return line ([(0, 0), (0, 0)])



def Eclair(x,y,j,Deb,Fin):
    if Deb < j:
        if j < Fin:
            F = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
            return line((F[0], F[1]), rgbcolor ='purple', thickness = 1)
    return line ([(0, 0), (0, 0)])



#Toutes les constantes
KVitesse = 0.2  #Vitesse de 0.2 soit +0.2x par image pour l'helicoptere
NbrImage = 300 #Nombre total d'images
t=-10*pi  #Angle pour tourner dans le sens inverse des aiguilles d'une montre(hélices arrières) - tourne 5 fois au total
DebEau1 = 152
FinEau1 = 176
DebEau2 = 152.5
FinEau2 = 176
DebEau3 = 153
FinEau3 = 176
DebEau4 = 178
FinEau4 = 202
DebEau5 = 178.5
FinEau5 = 202
DebEau6 = 179
FinEau6 = 202
DebEau7 = 210
FinEau7 = 236
DebEau8 = 210.5
FinEau8 = 236
DebEau9 = 211
FinEau9 = 236

#Matrices
Helice1 = matrix ([[cos(pi/2), cos(-pi/2)], [sin(pi/2), sin(-pi/2)],[1, 1]])
Helice2 = matrix ([[cos(0), cos(pi)], [sin(0), sin(pi)], [1, 1]])
CentreHelice = matrix ([[-19.5], [22.6], [1]]) #Centre autour duquel les hélices arrières vont tourner
m_Helicoptere = matrix ([[-20,-19,-16,-15,-14,-14,-15,-12,-13,-12,-12,-13,-13,-13.5,-14.5,-12.5,-13,-13.5,-14.5,-15,-15,-16,-20,-19.5, -14.3, -13.7, -15, -13],[24,23,23,24,24,25,25,25,24,23,22,23,21,21,21,20.5,20,20,20,20,21,22,22,22.6,17,17, 17, 17],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])
m_Eau1 = matrix([[16,16.5], [19,21], [1,1]])
m_Eau2 = matrix([[17,17.5], [19,21], [1,1]])
m_Eau3 = matrix([[18,18.5], [19,21], [1,1]])
m_Eau4 = matrix([[21,21.5], [19,21], [1,1]])
m_Eau5 = matrix([[22,22.5], [19,21], [1,1]])
m_Eau6 = matrix([[23,23.5], [19,21], [1,1]])
m_Eau7 = matrix([[28,28.5], [19,21], [1,1]])
m_Eau8 = matrix([[29,29.5], [19,21], [1,1]])
m_Eau9 = matrix([[30,30.5], [19,21], [1,1]])

m_Feu1 = matrix([[13,13],[6,7],[1,1]])
m_Feu2 = matrix([[12,12],[2,3],[1,1]])
m_Feu3 = matrix([[16,16],[3,3.5],[1,1]])
m_Feu4 = matrix([[15,15],[6,6.5],[1,1]])
m_Feu5 = matrix([[18,18],[6,7],[1,1]])
m_Feu6 = matrix([[17,17],[2,3],[1,1]])
m_Feu7 = matrix([[21,21],[3,3.5],[1,1]])
m_Feu8 = matrix([[20,20],[6,6.5],[1,1]])
m_Feu9 = matrix([[25,25],[6,7],[1,1]])
m_Feu10 = matrix([[24,24],[2,3],[1,1]])
m_Feu11 = matrix([[28,28],[3,3.5],[1,1]])
m_Feu12 = matrix([[27,27],[6,6.5],[1,1]])


#Vecteurs
Sapin1X = [14,14,12,14,12.5,14,13,14.5,16,15,16.5,15,17,15,15]
Sapin1Y = [0,2,2,4,4,6,6,8,6,6,4,4,2,2,0]
Sapin2X = [19,19,17,19,17.5,19,18,19.5,21,20,21.5,20,22,20,20]
Sapin2Y = [0,2,2,4,4,6,6,8,6,6,4,4,2,2,0]
Sapin3X = [26,26,24,26,24.5,26,25,26.5,28,27,28.5,27,29,27,27]
Sapin3Y = [0,2,2,4,4,6,6,8,6,6,4,4,2,2,0]

Eclair1X = [15,17]
Eclair1Y = [30,23]
Eclair2X = [17,15]
Eclair2Y = [23,17]
Eclair3X = [15,17]
Eclair3Y = [17,7]

Feu1x = [13, 13]
Feu1y = [6 ,6]
Feu2x = [12, 12]
Feu2y = [2 ,2]
Feu3x = [16, 16]
Feu3y = [3 ,3]
Feu4x = [15, 15]
Feu4y = [6 ,6]
Feu5x = [18, 18]
Feu5y = [6 ,6]
Feu6x = [17, 17]
Feu6y = [2 ,2]
Feu7x = [21, 21]
Feu7y = [3 ,3]
Feu8x = [20, 20]
Feu8y = [6 ,6]
Feu9x = [25, 25]
Feu9y = [6 ,6]
Feu10x = [24, 24]
Feu10y = [2 ,2]
Feu11x = [28, 28]
Feu11y = [3 ,3]
Feu12x = [27, 27]
Feu12y = [6 ,6]

#Toutes les animations

AnimationHelice1 = animate ([HeliceArriere(vec(rotation(Helice1, j*t/NbrImage, vec(CentreHelice)[0],vec(CentreHelice)[1], j))) for j in [0..NbrImage]])
AnimationHelice2 = animate ([HeliceArriere(vec(rotation(Helice2, j*t/NbrImage, vec(CentreHelice)[0],vec(CentreHelice)[1], j))) for j in [0..NbrImage]])

AnimEclair1 = animate([Eclair(Eclair1X, Eclair1Y ,j, 5 , 7) for j in [0..NbrImage]])
AnimEclair2 = animate([Eclair(Eclair2X, Eclair2Y ,j, 5 , 8) for j in [0..NbrImage]])
AnimEclair3 = animate([Eclair(Eclair3X, Eclair3Y ,j, 6, 9) for j in [0..NbrImage]])
AnimEclair1bis = animate([Eclair(Eclair1X, Eclair1Y ,j, 9 , 11) for j in [0..NbrImage]])
AnimEclair2bis = animate([Eclair(Eclair2X, Eclair2Y ,j, 9 , 12) for j in [0..NbrImage]])
AnimEclair3bis = animate([Eclair(Eclair3X, Eclair3Y ,j, 10, 13) for j in [0..NbrImage]])

AnimFeu1 = animate([Feu(vec(translationSpe(m_Feu1, 0 , j*0.02, j , 13 , 93)), j, 13 , 93, 1) for j in [0..NbrImage]])
AnimFeu2 = animate([Feu(vec(translationSpe(m_Feu2, 0 , j*0.02, j , 13 , 93)), j, 13 , 93, 2) for j in [0..NbrImage]])
AnimFeu3 = animate([Feu(vec(translationSpe(m_Feu3, 0 , j*0.02, j , 13 , 93)), j, 13 , 93, 1) for j in [0..NbrImage]])
AnimFeu4 = animate([Feu(vec(translationSpe(m_Feu4, 0 , j*0.02, j , 13 , 93)), j, 13 , 93, 2) for j in [0..NbrImage]])
AnimFeu5 = animate([Feu(vec(translationSpe(m_Feu5, 0 , j*0.02, j , 20 , 100)), j, 20 , 100, 1) for j in [0..NbrImage]])
AnimFeu6 = animate([Feu(vec(translationSpe(m_Feu6, 0 , j*0.02, j , 20 , 95)), j, 20 , 95, 2) for j in [0..NbrImage]])
AnimFeu7 = animate([Feu(vec(translationSpe(m_Feu7, 0 , j*0.02, j , 20 , 105)), j, 20 , 105, 1) for j in [0..NbrImage]])
AnimFeu8 = animate([Feu(vec(translationSpe(m_Feu8, 0 , j*0.02, j , 20 , 86)), j, 20 , 86, 2) for j in [0..NbrImage]])
AnimFeu9 = animate([Feu(vec(translationSpe(m_Feu9, 0 , j*0.02, j , 25 , 93)), j, 25 , 93, 2) for j in [0..NbrImage]])
AnimFeu10 = animate([Feu(vec(translationSpe(m_Feu10, 0 , j*0.02, j , 25 , 93)), j, 25 , 100, 1) for j in [0..NbrImage]])
AnimFeu11 = animate([Feu(vec(translationSpe(m_Feu11, 0 , j*0.02, j , 25 , 95)), j, 25 , 95, 2) for j in [0..NbrImage]])
AnimFeu12 = animate([Feu(vec(translationSpe(m_Feu12, 0 , j*0.02, j , 25 , 105)), j, 25 , 105, 1) for j in [0..NbrImage]])

AnimFeu13 = animate([Feu(vec(translationSpe(m_Feu1, 0 , (j-93)*0.02, j , 93 , 170)), j, 93 , 170, 1) for j in [0..NbrImage]])
AnimFeu14 = animate([Feu(vec(translationSpe(m_Feu2, 0 , (j-88)*0.02, j , 88 , 170)), j, 88 , 170, 2) for j in [0..NbrImage]])
AnimFeu15 = animate([Feu(vec(translationSpe(m_Feu3, 0 , (j-90)*0.02, j , 90 , 170)), j, 90 , 170, 1) for j in [0..NbrImage]])
AnimFeu16 = animate([Feu(vec(translationSpe(m_Feu4, 0 , (j-85)*0.02, j , 85 , 170)), j, 85 , 170, 2) for j in [0..NbrImage]])
AnimFeu17 = animate([Feu(vec(translationSpe(m_Feu5, 0 , (j-94)*0.02, j , 94 , 200)), j, 94 , 200, 1) for j in [0..NbrImage]])
AnimFeu18 = animate([Feu(vec(translationSpe(m_Feu6, 0 , (j-100)*0.02, j , 100 , 200)), j, 100 , 200, 2) for j in [0..NbrImage]])
AnimFeu19 = animate([Feu(vec(translationSpe(m_Feu7, 0 , (j-90)*0.02, j , 90 , 200)), j, 90 , 200, 1) for j in [0..NbrImage]])
AnimFeu20 = animate([Feu(vec(translationSpe(m_Feu8, 0 , (j-90)*0.02, j , 90 , 200)), j, 90 , 236, 2) for j in [0..NbrImage]])
AnimFeu21 = animate([Feu(vec(translationSpe(m_Feu9, 0 , (j-90)*0.02, j , 90 , 236)), j, 90 , 236, 2) for j in [0..NbrImage]])
AnimFeu22 = animate([Feu(vec(translationSpe(m_Feu10, 0 , (j-90)*0.02, j , 90 , 236)), j, 90 , 236, 1) for j in [0..NbrImage]])
AnimFeu23 = animate([Feu(vec(translationSpe(m_Feu11, 0 , (j-90)*0.02, j , 90 , 236)), j, 90 , 234, 2) for j in [0..NbrImage]])
AnimFeu24 = animate([Feu(vec(translationSpe(m_Feu12, 0 , (j-90)*0.02, j , 90 , 236)), j, 90 , 240, 1) for j in [0..NbrImage]])

AnimSapin1 = animate([Sapin(Sapin1X, Sapin1Y, j)for j in [0..NbrImage]])
AnimSapin2 = animate([Sapin(Sapin2X, Sapin2Y, j)for j in [0..NbrImage]])
AnimSapin3 = animate([Sapin(Sapin3X, Sapin3Y, j)for j in [0..NbrImage]])

AnimSol = animate([sol() for j in [0..NbrImage]])

#Addition des animations par thème
TSapin = AnimSapin1 + AnimSapin2 + AnimSapin3
THelice = AnimationHelice1 + AnimationHelice2
TEclair = AnimEclair1 + AnimEclair2 + AnimEclair3 + AnimEclair1bis + AnimEclair2bis + AnimEclair3bis
TFeu = AnimFeu1 + AnimFeu2 + AnimFeu3 + AnimFeu4 + AnimFeu5 + AnimFeu6 + AnimFeu7 + AnimFeu8 + AnimFeu9 + AnimFeu10 + AnimFeu11 + AnimFeu12 + AnimFeu13 + AnimFeu14 + AnimFeu15 + AnimFeu16 + AnimFeu17 + AnimFeu18 + AnimFeu19 + AnimFeu20 + AnimFeu21 + AnimFeu22 + AnimFeu23 + AnimFeu24

AnimAll =TSapin + AnimSol + THelice + TFeu + TEclair #Addition de toutes les animations

#Affichage
show (AnimAll, delay=5)
