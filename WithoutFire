#Animation d'un hélicoptère eteignant le feu d'une foret
#Réalisé par Julien DUPONT, Rémi GUERIN et Julien GODEST
#Date du rendu : XX/XX/2019


#Toutes les coordonnées x et y pour chaque élement

#HelicoptereX = [0,1,4,5,6,6,4,8,7,8,8,7,7,6.5,5.5,7.5,7,6.5,5.5,5,5,4,0,0.5] 
#HelicoptereY = [24,23,23,24,24,25,25,25,24,23,22,23,21,21,21,20.5,20,20,20,20,21,22,22,22.6] 

Sapin1X = [15,14,14,12,14,12.5,14,13,14.5,16,15,16.5,15,17,15]
Sapin1Y = [0,0,2,2,4,4,6,6,8,6,6,4,4,2,2]

Sapin2X = [20,19,19,17,19,17.5,19,18,19.5,21,20,21.5,20,22,20]
Sapin2Y = [0,0,2,2,4,4,6,6,8,6,6,4,4,2,2]

Sapin3X = [27,26,26,24,26,24.5,26,25,26.5,28,27,28.5,27,29,27]
Sapin3Y = [0,0,2,2,4,4,6,6,8,6,6,4,4,2,2]

#Sapin4X = [32,31,31,29,31,29.5,31,30,31.5,33,32,33.5,32,34,32]
#Sapin4Y = [0,0,2,2,4,4,6,6,8,6,6,4,4,2,2]


Feu1x = [13, 13]
Feu1y = [6 ,6]



#Définition des fonctions utilisé plus tard pour animer les objets

def translation(matrice, x, y):
    return matrix([[1,0,x],[0,1,y],[0,0,1]]) * matrice


def translationEau(matrice, x, y,j,deb,fin):
    if j > deb : 
        if j < fin :
            return matrix([[1,0,x],[0,1,y],[0,0,1]]) * matrice
    return matrice


def rotation(matrice, angle, x, y, nbrImage): #Utiliser pour tourner la matrice en fonction d'un angle et d'un nbrImage car la roue tourne et se déplace horizontalement en même temps

    x+= nbrImage * KVitesse
    return matrix ([[cos(angle), -sin(angle), x], [sin(angle), cos(angle), y], [0, 0, 1]]) * matrice

def vec(matrice): #Transforme une matrice donnée en paramètre en un vecteur (qui servira dans HeliceArriere pour faire des lignes)

    return vector (matrice)

def HeliceArriere (vecLigne): #Dessine les hélices à l'arrière de l'hélicoptère en noir

    return line ([(vecLigne[0], vecLigne[2]), (vecLigne[1], vecLigne[3])], color='black')


def Helicoptere(pos, NombreImage):
         
        x = [vector(pos)[j] for j in [0..27]]
        y = [vector(pos)[j] for j in [28..56]]
        if NombreImage % 2 == 0 : #Une fois sur deux le trait représentant l'hélice rapetissie, l'autre fois il s'agrandit ce qui donne l'illusion que les pales tournent
            x[6] += 1
            x[7] -= 1
        if NombreImage % 2 == 1 :
            x[6] -= 1
            x[7] += 1
        Assemblage = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
        M = matrix ([[cos(t), -sin(t)], [sin(t), cos(t)]]) 
        RC = [M *Assemblage[j] for j in [0..len(x)-1]]
        return line((RC[0], RC[1]), rgbcolor='red') + line((RC[1],RC[2]), rgbcolor='red',xmin=0, xmax=40, ymin = 0 , ymax = 30) + line((RC[2],RC[3]), rgbcolor='red') + line((RC[3],RC[4]), rgbcolor='red')  + line((RC[4],RC[8]), rgbcolor='red') + line((RC[4],RC[5]), rgbcolor='black') + line((RC[5],RC[6]), rgbcolor='black') + line((RC[5],RC[7]), rgbcolor='black') + line((RC[8],RC[9]), rgbcolor='red') + line((RC[8],RC[11]), rgbcolor='red')+ line((RC[9],RC[10]), rgbcolor='red') + line((RC[9],RC[11]), rgbcolor='red') + line((RC[10],RC[12]), rgbcolor='red') + line((RC[12],RC[13]), rgbcolor='red') + line((RC[13],RC[17]), rgbcolor='black') + line((RC[13],RC[14]), rgbcolor='red') + line((RC[14],RC[18]), rgbcolor='black') + line((RC[15],RC[16]), rgbcolor='black') + line((RC[16],RC[17]), rgbcolor='black') + line((RC[17],RC[18]), rgbcolor='black') + line((RC[18],RC[19]), rgbcolor='black') + line((RC[14],RC[20]), rgbcolor='red') + line((RC[20],RC[21]), rgbcolor='red') + line((RC[21],RC[22]), rgbcolor='red') + line((RC[22],RC[0]), rgbcolor='red') + circle (RC[23], 0.4, rgbcolor='black', fill = True) + polygon([RC[8],RC[9],RC[11]], rgbcolor='lightcyan') + polygon([RC[0],RC[1],RC[2],RC[3],RC[4],RC[8],RC[11],RC[9],RC[10],RC[12],RC[13],RC[14],RC[20],RC[21],RC[22]], rgbcolor='yellow') + polygon([RC[1],RC[2],RC[10]], rgbcolor='red') # On relie certains points entre eux pour former des lignes, on crée également un cercle, des polygones qu'on remplit d'une couleur

    
def Sapin(x,y,j) :

    A = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
    return polygon([A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[2]], rgbcolor='green') + polygon([A[0],A[1],A[2],A[14]], rgbcolor='brown') #On relie certains points pour former le tronc en marron et d'autres pour le sapin en vert
    

def Eau(pos,j,Deb,Fin) :
    if Deb < j :
        if j < Fin:
            return line([(pos[0], pos[2]), (pos[1], pos[3])], rgbcolor='blue')
    return line ([(0, 0), (0, 0)])

def Feu(x,y,j, Deb, Fin) :
    if Deb < j:
        if j < Fin:
            if j % 2 == 0 :
                y[0] += 0.1
            y[1] += 0.06       
            F = [vector(zip(x,y)[j]) for j in [0..len(x)-1]] #Relier les x et les y
            return line((F[0], F[1]), rgbcolor ='red', thickness = 2)
    return line ([(0, 0), (0, 0)])


#Toutes les constantes

KVitesse = 0.2  #Vitesse de 0.2 soit +0.2x par image
NbrImage = 134  #Nombre total d'images
t=-10*pi  #Angle pour tourner dans le sens inverse des aiguilles d'une montre(hélices arrières)
Helice1 = matrix ([[cos(pi/2), cos(-pi/2)], [sin(pi/2), sin(-pi/2)],[1, 1]]) #Hélice arrière 1
Helice2 = matrix ([[cos(0), cos(pi)], [sin(0), sin(pi)], [1, 1]]) #Hélice arrière 2
CentreHelice = matrix ([[0.5], [22.6], [1]]) #Centre autour duquel les hélices arrières vont tourner
m_Helicoptere = matrix ([[0,1,4,5,6,6,4,8,7,8,8,7,7,6.5,5.5,7.5,7,6.5,5.5,5,5,4,0,0.5, 5.7, 6.3, 5, 7],[24,23,23,24,24,25,25,25,24,23,22,23,21,21,21,20.5,20,20,20,20,21,22,22,22.6,17,17, 17, 17],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])

m_Eau1 = matrix([[16,16.5], [19,21], [1,1]])
m_Eau2 = matrix([[17,17.5], [19,21], [1,1]])
m_Eau3 = matrix([[18,18.5], [19,21], [1,1]])
m_Eau4 = matrix([[21,21.5], [19,21], [1,1]])
m_Eau5 = matrix([[22,22.5], [19,21], [1,1]])
m_Eau6 = matrix([[23,23.5], [19,21], [1,1]])
m_Eau7 = matrix([[28,28.5], [19,21], [1,1]])
m_Eau8 = matrix([[29,29.5], [19,21], [1,1]])
m_Eau9 = matrix([[30,30.5], [19,21], [1,1]])


DebEau1 = 52
FinEau1 = 76
DebEau2 = 52.5
FinEau2 = 76
DebEau3 = 53
FinEau3 = 76

DebEau4 = 78
FinEau4 = 102
DebEau5 = 78.5
FinEau5 = 102
DebEau6 = 79
FinEau6 = 102

DebEau7 = 110
FinEau7 = 136
DebEau8 = 110.5
FinEau8 = 136
DebEau9 = 111
FinEau9 = 136

#Toutes les animations

AnimHelicoptere = animate([Helicoptere(vec(translation(m_Helicoptere, j * KVitesse, 0)), j)for j in [0..NbrImage]], xmin=0, ymin=0, xmax=40, ymax=30)

AnimEau1 = animate([Eau(vec(translationEau(m_Eau1,-0.1 * (j-DebEau1 ), (j-DebEau1) * -0.5, j , DebEau1 ,FinEau1)), j, DebEau1 , FinEau1 ) for j in [0..NbrImage]])
AnimEau2 = animate([Eau(vec(translationEau(m_Eau2,-0.1 * (j-DebEau2 ), (j-DebEau2) * -0.5, j , DebEau2 ,FinEau2)), j, DebEau2 , FinEau2 ) for j in [0..NbrImage]])
AnimEau3 = animate([Eau(vec(translationEau(m_Eau3,-0.1 * (j-DebEau3 ), (j-DebEau3) * -0.5, j , DebEau3 ,FinEau3)), j, DebEau3 , FinEau3 ) for j in [0..NbrImage]])
AnimEau4 = animate([Eau(vec(translationEau(m_Eau4,-0.1 * (j-DebEau4 ), (j-DebEau4) * -0.5, j , DebEau4 ,FinEau4)), j, DebEau4 , FinEau4 ) for j in [0..NbrImage]])
AnimEau5 = animate([Eau(vec(translationEau(m_Eau5,-0.1 * (j-DebEau5 ), (j-DebEau5) * -0.5, j , DebEau5 ,FinEau5)), j, DebEau5 , FinEau5 ) for j in [0..NbrImage]])
AnimEau6 = animate([Eau(vec(translationEau(m_Eau6,-0.1 * (j-DebEau6 ), (j-DebEau6) * -0.5, j , DebEau6 ,FinEau6)), j, DebEau6 , FinEau6 ) for j in [0..NbrImage]])
AnimEau7 = animate([Eau(vec(translationEau(m_Eau7,-0.1 * (j-DebEau7 ), (j-DebEau7) * -0.5, j , DebEau7 ,FinEau7)), j, DebEau7 , FinEau7 ) for j in [0..NbrImage]])
AnimEau8 = animate([Eau(vec(translationEau(m_Eau8,-0.1 * (j-DebEau8 ), (j-DebEau8) * -0.5, j , DebEau8 ,FinEau8)), j, DebEau8 , FinEau8 ) for j in [0..NbrImage]])
AnimEau9 = animate([Eau(vec(translationEau(m_Eau9,-0.1 * (j-DebEau9 ), (j-DebEau9) * -0.5, j , DebEau9 ,FinEau9)), j, DebEau9 , FinEau9 ) for j in [0..NbrImage]])


AnimFeu1 = animate([Feu(Feu1x, Feu1y,j, 0 , FinEau1) for j in [0..NbrImage]])

AnimSapin1 = animate([Sapin(Sapin1X, Sapin1Y, j)for j in [0..NbrImage]])
AnimSapin2 = animate([Sapin(Sapin2X, Sapin2Y, j)for j in [0..NbrImage]])
AnimSapin3 = animate([Sapin(Sapin3X, Sapin3Y, j)for j in [0..NbrImage]])
#AnimSapin4 = animate([Sapin(Sapin4X, Sapin4Y, j)for j in [0..NbrImage]])

AnimationHelice1 = animate ([HeliceArriere(vec(rotation(Helice1, j*t/NbrImage, vec(CentreHelice)[0],vec(CentreHelice)[1], j))) for j in [0..NbrImage]])
AnimationHelice2 = animate ([HeliceArriere(vec(rotation(Helice2, j*t/NbrImage, vec(CentreHelice)[0],vec(CentreHelice)[1], j))) for j in [0..NbrImage]])

TEau = AnimEau1 + AnimEau2 + AnimEau3 + AnimEau4 + AnimEau5 + AnimEau6 + AnimEau7 + AnimEau8 + AnimEau9
TSapin = AnimSapin1 + AnimSapin2 + AnimSapin3 #+ AnimSapin4
THelice = AnimationHelice1 + AnimationHelice2
TFeu = AnimFeu1

AnimAll = AnimHelicoptere + TEau + TSapin + THelice + TFeu #Addition de toutes les animations

#Affichage
show (AnimAll, delay=5)
